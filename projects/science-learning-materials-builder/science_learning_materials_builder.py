# -*- coding: utf-8 -*-
"""Science Learning Materials Builder Agents

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p390KHKMQ9xcaDQ7eQTQJjdlX1JTxpmn
"""

# Install required packages
!pip install -q google-generativeai requests Pillow tavily-python

# =========================
# Imports
# =========================

# --- Standard library ---
import base64
import json
import os
import re
from datetime import datetime
from io import BytesIO
from typing import Dict, List, Any

# --- Third-party ---
import requests
from PIL import Image
from IPython.display import Markdown, display, HTML
import google.generativeai as genai
from tavily import TavilyClient

print("✅ All libraries imported successfully!")

# Get API keys from Colab secrets
from google.colab import userdata

GEMINI_API_KEY = userdata.get('GEMINI_API_KEY')
TAVILY_API_KEY = userdata.get('TAVILY_API_KEY')

# Configure Gemini
genai.configure(api_key=GEMINI_API_KEY)

# Initialize Tavily client
tavily_client = TavilyClient(api_key=TAVILY_API_KEY)

print("✅ API keys configured successfully!")
print(f"✅ Gemini models available: {[m.name for m in genai.list_models() if 'generateContent' in m.supported_generation_methods][:3]}")

def log_agent_title_html(title: str, emoji: str):
    """Display agent title with emoji in colored box."""
    html = f"""
    <div style="border:1px solid #3B82F6; border-left:6px solid #3B82F6; background:#EFF6FF;
                border-radius:8px; padding:16px; margin:10px 0;
                font-family:system-ui,-apple-system,sans-serif;">
        <h3 style="margin:0; color:#1E40AF;">{emoji} {title}</h3>
    </div>
    """
    display(HTML(html))

def log_tool_call_html(tool_name: str, arguments: str):
    """Log tool call details."""
    html = f"""
    <div style="border-left:4px solid #F59E0B; background:#FEF3C7; padding:12px;
                margin:8px 0; border-radius:4px; font-family:monospace; font-size:13px;">
        <strong style="color:#92400E;">🔧 Tool Call:</strong> {tool_name}<br>
        <strong style="color:#92400E;">Arguments:</strong> {arguments}
    </div>
    """
    display(HTML(html))

def log_tool_result_html(result: Any):
    """Log tool result."""
    result_str = str(result)[:500] + "..." if len(str(result)) > 500 else str(result)
    html = f"""
    <div style="border-left:4px solid #10B981; background:#D1FAE5; padding:12px;
                margin:8px 0; border-radius:4px; font-family:monospace; font-size:13px;">
        <strong style="color:#065F46;">✅ Tool Result:</strong><br>
        <pre style="margin:4px 0; white-space:pre-wrap; word-wrap:break-word;">{result_str}</pre>
    </div>
    """
    display(HTML(html))

def log_final_summary_html(summary: str):
    """Log final agent output."""
    html = f"""
    <div style="border:1px solid #22C55E; border-left:6px solid #16A34A; background:#DCFCE7;
                border-radius:8px; padding:16px; margin:10px 0;
                font-family:system-ui,-apple-system,sans-serif;">
        <h4 style="margin-top:0; color:#166534;">📋 Agent Summary</h4>
        <div style="white-space:pre-wrap; word-wrap:break-word;">{summary}</div>
    </div>
    """
    display(HTML(html))

print("✅ Helper functions loaded!")

def tavily_search_tool(query: str, max_results: int = 5) -> List[Dict[str, str]]:
    """
    Search the web for science information using Tavily API.

    Args:
        query: Search query (e.g., "photosynthesis explanation for kids")
        max_results: Maximum number of results to return

    Returns:
        List of search results with title, content, and URL
    """
    try:
        response = tavily_client.search(
            query=query,
            max_results=max_results,
            search_depth="basic"
        )

        results = []
        for item in response.get('results', []):
            results.append({
                'title': item.get('title', ''),
                'content': item.get('content', '')[:500],  # Limit content length
                'url': item.get('url', '')
            })

        return results
    except Exception as e:
        return [{"error": f"Search failed: {str(e)}"}]

# Test the search tool
print("🔍 Testing web search tool...")
test_results = tavily_search_tool("photosynthesis simple explanation for kids")
print(f"✅ Found {len(test_results)} results")
print(f"📄 First result: {test_results[0]['title'][:80]}...")

def curriculum_standards_tool(grade_level: int = 4) -> List[Dict[str, Any]]:
    """
    Returns age-appropriate science curriculum standards and topics.
    Based on Next Generation Science Standards (NGSS) for Grade 4.

    Args:
        grade_level: Student grade level (default: 4 for 9-year-olds)

    Returns:
        List of science topics with learning objectives
    """
    curriculum = [
        {
            "topic_id": "SCI001",
            "topic": "Photosynthesis",
            "grade_level": 4,
            "category": "Life Science",
            "learning_objectives": [
                "Understand how plants make food",
                "Identify the role of sunlight, water, and CO2",
                "Explain why leaves are green"
            ],
            "complexity_level": "Beginner",
            "prerequisite_knowledge": ["Plants are living things", "Sun provides light"],
            "recommended_duration": "45 minutes",
            "related_topics": ["Food chains", "Plant anatomy"]
        },
        {
            "topic_id": "SCI002",
            "topic": "Water Cycle",
            "grade_level": 4,
            "category": "Earth Science",
            "learning_objectives": [
                "Identify stages: evaporation, condensation, precipitation",
                "Understand how water moves through environment",
                "Explain why it rains"
            ],
            "complexity_level": "Beginner",
            "prerequisite_knowledge": ["Water exists in 3 states"],
            "recommended_duration": "40 minutes",
            "related_topics": ["Weather", "Clouds"]
        },
        {
            "topic_id": "SCI003",
            "topic": "Solar System",
            "grade_level": 4,
            "category": "Space Science",
            "learning_objectives": [
                "Name the 8 planets in order",
                "Understand what makes Earth special",
                "Learn basic facts about each planet"
            ],
            "complexity_level": "Beginner",
            "prerequisite_knowledge": ["Earth is a planet", "Sun is a star"],
            "recommended_duration": "50 minutes",
            "related_topics": ["Day and night", "Seasons"]
        },
        {
            "topic_id": "SCI004",
            "topic": "Simple Machines",
            "grade_level": 4,
            "category": "Physical Science",
            "learning_objectives": [
                "Identify 6 types of simple machines",
                "Find examples in daily life",
                "Understand how machines make work easier"
            ],
            "complexity_level": "Intermediate",
            "prerequisite_knowledge": ["Concept of force and movement"],
            "recommended_duration": "45 minutes",
            "related_topics": ["Force", "Motion"]
        },
        {
            "topic_id": "SCI005",
            "topic": "Food Chains",
            "grade_level": 4,
            "category": "Life Science",
            "learning_objectives": [
                "Understand producer, consumer, decomposer",
                "Create a simple food chain",
                "Explain energy flow in ecosystems"
            ],
            "complexity_level": "Beginner",
            "prerequisite_knowledge": ["Animals eat different things"],
            "recommended_duration": "40 minutes",
            "related_topics": ["Habitats", "Animal diets"]
        },
        {
            "topic_id": "SCI006",
            "topic": "States of Matter",
            "grade_level": 4,
            "category": "Physical Science",
            "learning_objectives": [
                "Identify solid, liquid, and gas",
                "Understand how matter changes states",
                "Recognize examples of each state"
            ],
            "complexity_level": "Beginner",
            "prerequisite_knowledge": ["Objects can be different forms"],
            "recommended_duration": "40 minutes",
            "related_topics": ["Temperature", "Freezing and melting"]
        }
    ]

    return curriculum

# Test the curriculum tool
print("📚 Testing curriculum standards tool...")
topics = curriculum_standards_tool()
print(f"✅ Loaded {len(topics)} science topics")
print(f"📖 Available topics: {[t['topic'] for t in topics]}")

def curriculum_research_agent(topic: str, grade_level: int = 4) -> str:
    """
    Research a science topic and validate age-appropriateness.

    Steps:
    1. Search web for simple explanations and fun facts
    2. Check curriculum standards for learning objectives
    3. Gather 3-5 interesting facts suitable for kids
    4. Suggest hands-on activities

    Returns:
        Topic summary with learning objectives and fun facts
    """
    log_agent_title_html("Curriculum Research Agent", "🔬")

    # Step 1: Search for educational content
    search_query = f"{topic} simple explanation for 9 year old kids grade 4"
    log_tool_call_html("tavily_search_tool", search_query)

    search_results = tavily_search_tool(search_query)
    log_tool_result_html(f"Found {len(search_results)} educational resources")

    # Step 2: Get curriculum standards
    log_tool_call_html("curriculum_standards_tool", f"grade_level={grade_level}")

    curriculum = curriculum_standards_tool(grade_level)
    topic_standard = next((t for t in curriculum if t['topic'].lower() == topic.lower()), None)

    log_tool_result_html(f"Found curriculum standard: {topic_standard['topic'] if topic_standard else 'Not in standard list'}")

    # Step 3: Use Gemini to synthesize research
    model = genai.GenerativeModel('gemini-2.0-flash-exp')

    prompt = f"""
You are a science education researcher for elementary school.

Topic: {topic}
Grade Level: {grade_level} (Age 9-10)

Web Research Results:
{json.dumps(search_results[:3], indent=2)}

Curriculum Standard:
{json.dumps(topic_standard, indent=2) if topic_standard else 'Not in standard curriculum - assess appropriateness'}

Your task:
1. Assess if this topic is appropriate for Grade 4 (Yes/No + reasoning)
2. List 3-5 key learning objectives in simple language
3. Find 5 amazing fun facts that will excite 9-year-olds
4. Suggest 1-2 hands-on activities or simple experiments
5. Recommended lesson duration

Format your response as:

APPROPRIATENESS: [Yes/No]
REASON: [Why this is/isn't suitable for 9-year-olds]

LEARNING OBJECTIVES:
1. [Objective 1]
2. [Objective 2]
...

FUN FACTS:
1. [Fact 1]
2. [Fact 2]
...

HANDS-ON ACTIVITY:
[Activity description]

DURATION: [X minutes]
"""

    response = model.generate_content(prompt)
    result = response.text

    log_final_summary_html(result)

    return result

print("✅ Curriculum Research Agent defined")

def visual_illustrator_agent(topic_summary: str, topic: str) -> Dict[str, Any]:
    """
    Generate educational illustrations for the science topic.

    Creates 3 types of visuals:
    1. Educational diagram (labeled, clear concept)
    2. Fun cartoon illustration (engaging, colorful)
    3. Step-by-step process diagram

    Returns:
        Dictionary with image paths and captions
    """
    log_agent_title_html("Visual Illustrator Agent", "🎨")

    # Step 1: Generate image prompts using Gemini
    model = genai.GenerativeModel('gemini-2.0-flash-exp')

    prompt_generation = f"""
Based on this science topic for 9-year-olds:

{topic_summary}

Create 3 detailed image generation prompts for educational illustrations:

1. EDUCATIONAL DIAGRAM: A clear, labeled diagram showing the main concept
2. FUN ILLUSTRATION: Cartoon-style, colorful, engaging for kids
3. PROCESS STEPS: Step-by-step visual guide

Requirements for all images:
- Bright, cheerful colors
- Simple, clear labels (if applicable)
- No scary or complex imagery
- Appropriate for elementary school textbook
- Educational but fun

Return ONLY a JSON object:
{{
    "diagram_prompt": "detailed prompt for educational diagram",
    "fun_illustration_prompt": "detailed prompt for fun cartoon",
    "process_prompt": "detailed prompt for step-by-step",
    "diagram_caption": "short caption",
    "fun_caption": "short caption",
    "process_caption": "short caption"
}}
"""

    response = model.generate_content(prompt_generation)
    content = response.text.strip()

    # Extract JSON from response
    match = re.search(r'\{.*\}', content, re.DOTALL)
    if match:
        prompts = json.loads(match.group(0))
    else:
        prompts = {
            "diagram_prompt": f"Educational diagram of {topic} for kids",
            "fun_illustration_prompt": f"Fun cartoon illustration of {topic}",
            "process_prompt": f"Step-by-step process of {topic}",
            "diagram_caption": "Educational diagram",
            "fun_caption": "Fun illustration",
            "process_caption": "Process steps"
        }

    log_tool_result_html(f"Generated 3 image prompts")

    # Step 2: Generate images using Gemini Imagen
    imagen_model = genai.GenerativeModel('gemini-2.0-flash-exp')
    images = {}

    image_types = [
        ("diagram", prompts["diagram_prompt"], prompts["diagram_caption"]),
        ("fun_illustration", prompts["fun_illustration_prompt"], prompts["fun_caption"]),
        ("process", prompts["process_prompt"], prompts["process_caption"])
    ]

    for img_type, prompt_text, caption in image_types:
        # Note: Gemini doesn't directly support image generation like DALL-E
        # For this demo, we'll create placeholder images
        # In production, you would use Imagen API or DALL-E

        filename = f"{img_type}_{topic.lower().replace(' ', '_')}.txt"

        # Save prompt as text file (placeholder for actual image generation)
        with open(filename, 'w') as f:
            f.write(f"IMAGE PROMPT: {prompt_text}\n\nCAPTION: {caption}")

        images[img_type] = {
            "path": filename,
            "prompt": prompt_text,
            "caption": caption
        }

        log_tool_result_html(f"Created {img_type} prompt: {filename}")

    summary = f"""
    <h3>Generated 3 Educational Illustrations</h3>
    <p><strong>1. Diagram:</strong> {prompts['diagram_caption']}</p>
    <p><strong>2. Fun Illustration:</strong> {prompts['fun_caption']}</p>
    <p><strong>3. Process Steps:</strong> {prompts['process_caption']}</p>
    <p><em>Note: In production, these would be actual images generated by Imagen/DALL-E.
    For this demo, prompts are saved as text files.</em></p>
    """

    log_final_summary_html(summary)

    return images

print("✅ Visual Illustrator Agent defined")

def content_writer_agent(topic_summary: str, images: Dict[str, Any], topic: str) -> Dict[str, Any]:
    """
    Write lesson content for 9-year-olds.

    Creates:
    1. Simple explanation (3-4 paragraphs, 3rd grade reading level)
    2. Vocabulary words with kid-friendly definitions
    3. Quiz questions (5 multiple choice + 2 short answer)
    4. Fun challenge activity

    Returns:
        Complete lesson content
    """
    log_agent_title_html("Content Writer Agent", "✍️")

    model = genai.GenerativeModel('gemini-2.0-flash-exp')

    prompt = f"""
You are a science teacher writing lessons for 9-year-olds.

Topic Summary:
{topic_summary}

Generated Images:
- Diagram: {images['diagram']['caption']}
- Fun Illustration: {images['fun_illustration']['caption']}
- Process: {images['process']['caption']}

Write a complete lesson with:

1. SIMPLE EXPLANATION (3-4 paragraphs)
   - Use 3rd grade reading level (short sentences, max 15 words)
   - Relate to everyday life
   - Mention the diagrams provided
   - Make it exciting and fun!

2. VOCABULARY (5 key terms)
   - Word + kid-friendly definition
   - Example: "Chlorophyll: The green stuff in leaves that captures sunlight"

3. QUIZ QUESTIONS
   - 5 multiple choice (4 options each, mark correct answer)
   - 2 short answer questions with sample answers

4. FUN CHALLENGE
   - One creative activity kids can do at home
   - Should reinforce the main concept

Return as JSON:
{{
    "explanation": "...",
    "vocabulary": [
        {{"term": "...", "definition": "..."}}
    ],
    "multiple_choice": [
        {{
            "question": "...",
            "options": ["A. ...", "B. ...", "C. ...", "D. ..."],
            "correct_answer": "B"
        }}
    ],
    "short_answer": [
        {{"question": "...", "sample_answer": "..."}}
    ],
    "fun_challenge": "..."
}}
"""

    response = model.generate_content(prompt)
    content = response.text.strip()

    # Extract JSON
    match = re.search(r'\{.*\}', content, re.DOTALL)
    if match:
        lesson_content = json.loads(match.group(0))
    else:
        # Fallback structure
        lesson_content = {
            "explanation": "Content generation failed. Please try again.",
            "vocabulary": [],
            "multiple_choice": [],
            "short_answer": [],
            "fun_challenge": ""
        }

    summary = f"""
    <h3>Lesson Content Created</h3>
    <p><strong>Explanation:</strong> {len(lesson_content.get('explanation', ''))} characters</p>
    <p><strong>Vocabulary Words:</strong> {len(lesson_content.get('vocabulary', []))} terms</p>
    <p><strong>Multiple Choice:</strong> {len(lesson_content.get('multiple_choice', []))} questions</p>
    <p><strong>Short Answer:</strong> {len(lesson_content.get('short_answer', []))} questions</p>
    <p><strong>Fun Challenge:</strong> ✅ Included</p>
    """

    log_final_summary_html(summary)

    return lesson_content

print("✅ Content Writer Agent defined")

def lesson_packaging_agent(
    topic: str,
    topic_summary: str,
    images: Dict[str, Any],
    lesson_content: Dict[str, Any],
    grade_level: int = 4
) -> str:
    """
    Package everything into a complete lesson plan.

    Creates:
    - Teacher guide
    - Student worksheet
    - Answer key
    - Extension activities

    Returns:
        Path to markdown file
    """
    log_agent_title_html("Lesson Packaging Agent", "📦")

    # Beautify summary for teachers
    model = genai.GenerativeModel('gemini-2.0-flash-exp')

    beautify_prompt = f"""
Rewrite this science topic summary as a clear teacher guide:

{topic_summary}

Format:
### Learning Objectives
[List objectives as bullet points]

### Key Concepts
[Main ideas to emphasize]

### Teaching Tips
[Helpful suggestions for teaching this topic]
"""

    response = model.generate_content(beautify_prompt)
    beautified_summary = response.text.strip()

    log_tool_result_html("Beautified summary for teacher guide")

    # Build markdown content
    markdown_content = f"""# 🔬 Science Lesson: {topic}
**Grade Level**: {grade_level} (Ages 9-10)
**Duration**: 45 minutes
**Category**: Science

---

## 📚 Teacher Guide

{beautified_summary}

### Materials Needed
- Printed student worksheets
- Colored pencils or crayons
- Optional: Materials for hands-on activity (see Fun Challenge section)

---

## 📖 Student Lesson

### What is {topic}?

{lesson_content.get('explanation', '')}

### 📊 Learning Visuals

**Diagram**: {images['diagram']['caption']}
*See generated image: {images['diagram']['path']}*

**Fun Illustration**: {images['fun_illustration']['caption']}
*See generated image: {images['fun_illustration']['path']}*

**Process Steps**: {images['process']['caption']}
*See generated image: {images['process']['path']}*

### 📝 Vocabulary Words

"""

    # Add vocabulary
    for vocab in lesson_content.get('vocabulary', []):
        markdown_content += f"**{vocab['term']}**: {vocab['definition']}\n\n"

    markdown_content += "\n---\n\n## ✅ Check Your Understanding\n\n"

    # Add quiz questions
    for i, q in enumerate(lesson_content.get('multiple_choice', []), 1):
        markdown_content += f"**{i}. {q['question']}**\n\n"
        for option in q['options']:
            markdown_content += f"   {option}\n"
        markdown_content += "\n"

    markdown_content += "\n### Short Answer Questions\n\n"
    for i, q in enumerate(lesson_content.get('short_answer', []), 1):
        markdown_content += f"**{i}. {q['question']}**\n\n"
        markdown_content += "_" * 50 + "\n\n"

    markdown_content += f"\n---\n\n## 🌟 Fun Challenge\n\n{lesson_content.get('fun_challenge', '')}\n\n"

    # Add answer key
    markdown_content += "\n---\n\n## 🔑 Answer Key (For Teachers)\n\n### Multiple Choice\n"
    for i, q in enumerate(lesson_content.get('multiple_choice', []), 1):
        markdown_content += f"{i}. {q.get('correct_answer', 'N/A')}\n"

    markdown_content += "\n### Short Answer\n"
    for i, q in enumerate(lesson_content.get('short_answer', []), 1):
        markdown_content += f"{i}. {q.get('sample_answer', 'N/A')}\n\n"

    markdown_content += f"\n---\n\n*Lesson created: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n"

    # Save to file
    filename = f"science_lesson_{topic.lower().replace(' ', '_')}_grade{grade_level}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"

    with open(filename, "w", encoding="utf-8") as f:
        f.write(markdown_content)

    summary = f"""
    <h3>✅ Lesson Plan Created Successfully!</h3>
    <p><strong>File:</strong> {filename}</p>
    <p><strong>Size:</strong> {len(markdown_content):,} characters</p>
    <p><strong>Includes:</strong></p>
    <ul>
        <li>Teacher guide with learning objectives</li>
        <li>Student-friendly explanations</li>
        <li>3 educational illustrations (prompts)</li>
        <li>{len(lesson_content.get('vocabulary', []))} vocabulary words</li>
        <li>{len(lesson_content.get('multiple_choice', []))} multiple choice questions</li>
        <li>{len(lesson_content.get('short_answer', []))} short answer questions</li>
        <li>Fun challenge activity</li>
        <li>Complete answer key</li>
    </ul>
    """

    log_final_summary_html(summary)

    return filename

print("✅ Lesson Packaging Agent defined")

def run_science_lesson_pipeline(topic: str, grade_level: int = 4) -> Dict[str, Any]:
    """
    Complete pipeline to generate science lesson material for 9-year-olds.

    Args:
        topic: Science topic (e.g., "Photosynthesis", "Water Cycle", "Solar System")
        grade_level: Student grade level (default: 4 for ages 9-10)

    Returns:
        Dictionary with all outputs including lesson file path
    """
    print("\n" + "="*60)
    print(f"🔬 SCIENCE LESSON GENERATOR")
    print(f"📚 Topic: {topic}")
    print(f"🎓 Grade Level: {grade_level} (Ages 9-10)")
    print("="*60 + "\n")

    # Step 1: Research topic
    topic_summary = curriculum_research_agent(topic, grade_level)
    print("\n✅ Topic research completed\n")

    # Step 2: Generate illustrations
    images = visual_illustrator_agent(topic_summary, topic)
    print("\n🖼️ Illustrations generated\n")

    # Step 3: Write lesson content
    lesson_content = content_writer_agent(topic_summary, images, topic)
    print("\n📝 Lesson content written\n")

    # Step 4: Package into lesson plan
    lesson_path = lesson_packaging_agent(
        topic=topic,
        topic_summary=topic_summary,
        images=images,
        lesson_content=lesson_content,
        grade_level=grade_level
    )
    print(f"\n📦 Lesson plan created: {lesson_path}\n")

    print("="*60)
    print("🎉 LESSON GENERATION COMPLETE!")
    print("="*60)

    return {
        "topic": topic,
        "grade_level": grade_level,
        "topic_summary": topic_summary,
        "images": images,
        "lesson_content": lesson_content,
        "lesson_path": lesson_path
    }

print("✅ Complete pipeline function defined")

# Generate a complete lesson on Photosynthesis
result1 = run_science_lesson_pipeline("How does a cactus survive in the desert?")

# View the generated lesson
with open(result1["lesson_path"], "r", encoding="utf-8") as f:
    lesson_content = f.read()

display(Markdown(lesson_content))

!pip install -q markdown-it-py weasyprint

import markdown_it
from weasyprint import HTML

# Function to convert markdown to PDF
def markdown_to_pdf(markdown_string, output_filename):
    """Converts a markdown string to a PDF file."""
    md = markdown_it.MarkdownIt()
    html_string = md.render(markdown_string)
    HTML(string=html_string).write_pdf(output_filename)
    print(f"✅ Successfully converted to PDF: {output_filename}")

# Load the generated lesson markdown content
with open(result1["lesson_path"], "r", encoding="utf-8") as f:
    lesson_content = f.read()

# Define the output PDF filename
pdf_filename = result1["lesson_path"].replace(".md", ".pdf")

# Convert and save as PDF
markdown_to_pdf(lesson_content, pdf_filename)

# Display the generated PDF file path
display(f"Your lesson plan has been saved as: {pdf_filename}")