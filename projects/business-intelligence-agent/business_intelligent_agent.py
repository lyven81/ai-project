# -*- coding: utf-8 -*-
"""Business Intelligent Agent

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10wkxsg7Crcdz9oa3rFKlJ6Jtez1CB3xf
"""

# Install required packages
!pip install -q google-generativeai pandas numpy matplotlib seaborn

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import google.generativeai as genai
import json
from typing import Dict, Any, List
from datetime import datetime
from IPython.display import display, HTML

print("✅ All libraries imported successfully")

# Configure Gemini API
from google.colab import userdata

# Get API key from Colab secrets
# To add: Click the key icon in left sidebar > Add Secret > Name: GEMINI_API_KEY
GEMINI_API_KEY = userdata.get('GEMINI_API_KEY')
genai.configure(api_key=GEMINI_API_KEY)

print("✅ Gemini API configured successfully")

# Upload dataset
from google.colab import files

print("📤 Please upload the Cash Cows dataset (dataset.csv)")
uploaded = files.upload()

# Load the uploaded file
filename = list(uploaded.keys())[0]
df_original = pd.read_csv(filename)

# Clean column names (remove any leading/trailing spaces)
df_original.columns = df_original.columns.str.strip()

print(f"\n✅ Dataset loaded successfully: {len(df_original):,} rows, {len(df_original.columns)} columns")
print(f"\n📊 Dataset shape: {df_original.shape}")
print(f"\n📋 Columns: {list(df_original.columns)}")

# Display first few rows
print("\n🔍 First 5 rows of the dataset:")
display(df_original.head())

print("\n📈 Dataset info:")
df_original.info()

def build_schema_block(df: pd.DataFrame) -> str:
    """
    Build a comprehensive schema description for the AI agent.
    Includes column names, types, unique values, and sample data.
    """
    schema_lines = []
    schema_lines.append("DATASET SCHEMA:")
    schema_lines.append(f"Total Rows: {len(df):,}")
    schema_lines.append(f"Total Columns: {len(df.columns)}")
    schema_lines.append("\nCOLUMNS:")

    for col in df.columns:
        dtype = str(df[col].dtype)
        unique_count = df[col].nunique()
        null_count = df[col].isnull().sum()

        schema_lines.append(f"\n- {col}:")
        schema_lines.append(f"  Type: {dtype}")
        schema_lines.append(f"  Unique values: {unique_count:,}")
        schema_lines.append(f"  Null values: {null_count:,}")

        # Show sample values for categorical/low-cardinality columns
        if unique_count <= 20:
            samples = df[col].value_counts().head(10).to_dict()
            schema_lines.append(f"  Sample values: {samples}")
        else:
            # For high-cardinality columns, show range or examples
            if dtype in ['int64', 'float64']:
                min_val = df[col].min()
                max_val = df[col].max()
                mean_val = df[col].mean()
                schema_lines.append(f"  Range: {min_val:.2f} to {max_val:.2f} (mean: {mean_val:.2f})")
            else:
                samples = df[col].dropna().sample(min(5, len(df[col].dropna()))).tolist()
                schema_lines.append(f"  Sample values: {samples}")

    return "\n".join(schema_lines)

# Build schema
SCHEMA = build_schema_block(df_original)

print("✅ Dataset schema built successfully")
print("\n" + "="*60)
print(SCHEMA)
print("="*60)

PROMPT = """
You are a Business Intelligence Filter Agent. Your job is to write executable Python code to filter and analyze an e-commerce dataset.

DATASET INFORMATION:
{schema}

AVAILABLE VARIABLES:
- df: pandas DataFrame containing the full dataset ({num_rows:,} rows)
- pd: pandas library
- np: numpy library
- plt: matplotlib.pyplot
- sns: seaborn

USER QUERY:
{query}

INSTRUCTIONS:
1. Write Python code to answer the user's query by filtering and analyzing the 'df' DataFrame
2. Use pandas operations (df[df['column'] == value], df.query(), df.groupby(), etc.)
3. For visualizations, use matplotlib/seaborn (plt.figure(), sns.barplot(), etc.)
4. ALWAYS set a STATUS variable: "success" or "error"
5. ALWAYS set an answer_text variable with your findings
6. Include helpful print statements for debugging
7. If you encounter issues, provide suggestions for the user

CODE STRUCTURE REQUIREMENTS:
- Start with: STATUS = "success"
- End with: answer_text = "your answer here"
- Use try-except blocks for error handling
- Print intermediate results for transparency
- Set STATUS = "error" if something goes wrong

EXAMPLE CODE PATTERNS:

# Pattern 1: Simple filtering
STATUS = "success"
try:
    filtered_df = df[df['profit_margin'] > 20]
    count = len(filtered_df)
    print(f"Found {{count}} high-profit orders")
    answer_text = f"There are {{count:,}} orders with profit margin > 20%"
except Exception as e:
    STATUS = "error"
    answer_text = f"Error: {{str(e)}}"

# Pattern 2: Multi-condition filtering
STATUS = "success"
try:
    mask = (df['category'] == 'Electronics') & (df['discount'] > 0) & (df['profit_margin'] > 10)
    filtered_df = df[mask]
    avg_profit = filtered_df['profit_margin'].mean()
    print(f"Average profit margin: {{avg_profit:.2f}}%")
    answer_text = f"Discounted Electronics orders with profit > 10%: {{len(filtered_df):,}} orders, avg profit: {{avg_profit:.2f}}%"
except Exception as e:
    STATUS = "error"
    answer_text = f"Error: {{str(e)}}"

# Pattern 3: Aggregation and grouping
STATUS = "success"
try:
    grouped = df.groupby('region')['profit_margin'].agg(['mean', 'count']).round(2)
    print("Profit by region:")
    print(grouped)
    best_region = grouped['mean'].idxmax()
    answer_text = f"Best performing region: {{best_region}} with {{grouped.loc[best_region, 'mean']:.2f}}% avg profit"
except Exception as e:
    STATUS = "error"
    answer_text = f"Error: {{str(e)}}"

# Pattern 4: Visualization
STATUS = "success"
try:
    # Filter data
    top_categories = df.groupby('category')['total_amount'].sum().sort_values(ascending=False).head(5)

    # Create visualization
    plt.figure(figsize=(10, 6))
    top_categories.plot(kind='bar', color='steelblue')
    plt.title('Top 5 Categories by Revenue', fontsize=14, fontweight='bold')
    plt.xlabel('Category')
    plt.ylabel('Total Revenue ($)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    answer_text = f"Top category: {{top_categories.index[0]}} with ${{top_categories.iloc[0]:,.2f}} in revenue"
except Exception as e:
    STATUS = "error"
    answer_text = f"Error creating visualization: {{str(e)}}"

OUTPUT YOUR CODE:
Write ONLY executable Python code. Do not include markdown, explanations, or code fences.
"""

print("✅ Agent prompt defined successfully")

def generate_llm_code(query: str, schema: str, num_rows: int, model_name: str = "gemini-2.0-flash-exp") -> str:
    """
    Generate executable Python code using Gemini LLM.

    Args:
        query: User's filtering/analysis question
        schema: Dataset schema information
        num_rows: Number of rows in dataset
        model_name: Gemini model to use

    Returns:
        Generated Python code as string
    """
    # Format the prompt with user query and schema
    formatted_prompt = PROMPT.format(
        schema=schema,
        query=query,
        num_rows=num_rows
    )

    print(f"🤖 Generating code for query: '{query}'")
    print(f"📏 Prompt length: {len(formatted_prompt):,} characters")
    print(f"🔄 Calling Gemini model: {model_name}...")

    try:
        # Initialize the model
        model = genai.GenerativeModel(model_name)

        # Generate response
        response = model.generate_content(formatted_prompt)

        # Check for blocking or empty response
        if hasattr(response, 'prompt_feedback') and response.prompt_feedback.block_reason:
            block_reason = response.prompt_feedback.block_reason
            print(f"🚫 Response blocked: {block_reason}")
            return f'STATUS = "error"\nanswer_text = "Response blocked by safety filters: {block_reason}"'

        if not response.text or response.text.strip() == "":
            print("⚠️ Empty response from LLM")
            return 'STATUS = "error"\nanswer_text = "The LLM returned an empty response. Please try rephrasing your query."'

        generated_code = response.text.strip()
        print(f"✅ Code generated successfully ({len(generated_code)} characters)")

        return generated_code

    except Exception as e:
        print(f"❌ Error calling Gemini API: {str(e)}")
        return f'STATUS = "error"\nanswer_text = "API Error: {str(e)}"'

print("✅ Code generation function defined")

def _extract_execute_block(text: str) -> str:
    """
    Extract executable Python code from LLM response.
    Handles markdown code blocks and raw code.
    """
    # Handle None or empty string
    if not text or text.strip() == "":
        # Return fallback code instead of raising error
        return '''
STATUS = "error"
answer_text = "The LLM returned an empty response. Please try rephrasing your query or check API status."
print("LOG: Empty LLM response received")
'''

    text = text.strip()

    # If wrapped in markdown code blocks, extract the code
    if "```python" in text:
        start = text.find("```python") + len("```python")
        end = text.find("```", start)
        if end != -1:
            return text[start:end].strip()
    elif "```" in text:
        start = text.find("```") + len("```")
        end = text.find("```", start)
        if end != -1:
            return text[start:end].strip()

    # Otherwise, return as-is (assume it's raw code)
    return text

def execute_generated_code(code_text: str, df: pd.DataFrame) -> Dict[str, Any]:
    """
    Execute generated Python code in a safe namespace.

    Args:
        code_text: Python code to execute
        df: DataFrame to make available in execution context

    Returns:
        Dictionary with STATUS and answer_text
    """
    # Extract executable code
    code = _extract_execute_block(code_text)

    if not code.strip():
        return {
            "STATUS": "error",
            "answer_text": "No executable code found in LLM response"
        }

    print("\n" + "="*60)
    print("EXECUTING GENERATED CODE:")
    print("="*60)
    print(code)
    print("="*60 + "\n")

    # Create safe execution namespace
    namespace = {
        "df": df.copy(),  # Work on a copy to avoid modifying original
        "pd": pd,
        "np": np,
        "plt": plt,
        "sns": sns,
        "STATUS": "unknown",
        "answer_text": "No answer generated"
    }

    try:
        # Execute the code
        exec(code, namespace)

        # Extract results
        status = namespace.get("STATUS", "unknown")
        answer = namespace.get("answer_text", "No answer provided")

        return {
            "STATUS": status,
            "answer_text": answer
        }

    except Exception as e:
        error_msg = f"Execution error: {str(e)}"
        print(f"❌ {error_msg}")
        return {
            "STATUS": "error",
            "answer_text": error_msg
        }

print("✅ Code execution functions defined")

def filter_agent(query: str, df: pd.DataFrame, schema: str, model_name: str = "gemini-2.0-flash-exp") -> str:
    """
    Main Business Intelligence Filter Agent function.

    Args:
        query: User's filtering/analysis question
        df: Dataset DataFrame
        schema: Dataset schema information
        model_name: Gemini model to use

    Returns:
        Answer text from the agent
    """
    print("\n" + "🔵"*30)
    print(f"📊 BUSINESS INTELLIGENCE FILTER AGENT")
    print("🔵"*30)
    print(f"\n❓ Query: {query}\n")

    # Step 1: Generate code using LLM
    code = generate_llm_code(
        query=query,
        schema=schema,
        num_rows=len(df),
        model_name=model_name
    )

    # Step 2: Execute the generated code
    result = execute_generated_code(code, df)

    # Step 3: Display results
    print("\n" + "="*60)
    print("AGENT RESPONSE:")
    print("="*60)

    status = result["STATUS"]
    answer = result["answer_text"]

    if status == "success":
        print(f"✅ Status: {status}")
        print(f"\n📋 Answer:\n{answer}")
    else:
        print(f"❌ Status: {status}")
        print(f"\n⚠️ Answer:\n{answer}")

    print("\n" + "🔵"*30 + "\n")

    return answer

print("✅ Filter agent function defined")

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="can you how me all the column in the dataset?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="can you create a pie chart showing the propotion of payment method?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="which product category is making loss because of the discount?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="which product category has the highest shipping cost?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="does discount lead to more order or it reduce profit margin?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="can you list down top 10 product that has highest profits with zero discount? include product category, quantity sold and sales amount in the table",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="can we confirm that electronics category is doing better than other categories without discount? can you show a pie chart showing percentage of sales contributed by non-discount order and discount order? we want to know whether zero-discount bring more sales.",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="how does discount influence gender shopping behavior? are discount more likely to convert male or female buyer?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="what is the proportion of female customer who buy with discount and who buy without discount? which group contributed to more sales amount?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="is female customer more likely to return product than male customer?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="which product category has the highest return rate?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="Which factor is more likely to cause returns, shipping cost, delivery time, payment method, discount, or gender?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="What is average shipping cost for each product categroy? can you show it in bar chart?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="What is the average delivery time for each category? can you show in bar chart?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="can you compare likely a product will return when delivery time is more than 4 and 5 days?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="Which product has the longest delivery time? was it return by customer?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="Can you show shipping cost in each region in bar chart? please label the chart",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="Which products are cash cow that have consitent profit? can you show it in bar chart? please label the chart",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="What are the top 3 best selling products in each region? include product category, unit sold, sales amount and profit margin in the table?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="can we confirm electronic is the best performing category in terms of unit sold, sales amount and profit margin?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="how many age group in this dataset? Which customer age group bring in most sales? which customer age group is more profitable? can you calculate lifetime value for each group?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="Which product category customer age between 18-29 spend most on? How often they apply discount? How likely they will return goods?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="Please group the ages into ranges (e.g., 18–29, 30–39, and so on) and calculate the lifetime value (LTV) for each age range.",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="Which region is the most profitable?",
    df=df_original,
    schema=SCHEMA
)

# Example 1: Identify cash cow products (high profit margin)
result1 = filter_agent(
    query="Please group the ages into ranges (e.g., 18–29, 30–39, and so on) and calculate number of customer in each age range in each region? also include total purchase, sales amount and profit margin in the table",
    df=df_original,
    schema=SCHEMA
)